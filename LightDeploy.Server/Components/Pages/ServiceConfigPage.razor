@page "/service-config"
@using LightDeploy.Server.Domain
@using Masuit.Tools
@using LightDeploy.Server.Components.Pages.ServiceConfigComponents
@using Serilog
@inject ISqlSugarClient DbClient
@inject ISnackbar Message
@inject IDialogService DialogService
<PageTitle>服务配置</PageTitle>
<div style="display: flex;flex-direction: column;gap: 10px">
    <MudGrid Spacing="12">
        <MudItem lg="2" xs="10">
            <MudSelect T="string" @bind-Value="_environmentName" Placeholder="选择环境" Clearable>
                <MudSelectItem Value="@("开发")"/>
                <MudSelectItem Value="@("开发测试")"/>
                <MudSelectItem Value="@("测试")"/>
                <MudSelectItem Value="@("预览")"/>
                <MudSelectItem Value="@("生产")"/>
            </MudSelect>
        </MudItem>
        <MudItem xs="2">
            <MudSelect T="string" @bind-Value="_groupName" Placeholder="选择类别" Clearable>
                @foreach (var item in _serviceGroups ?? new List<string?>())
                {
                    <MudSelectItem Value="item"></MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="2">
            <MudTextField @bind-Value="_serviceName" Placeholder="服务名" Variant="Variant.Text"></MudTextField>
        </MudItem>
        <MudItem xs="2">
            <div style="display: flex;gap: 10px">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search">搜索</MudButton>
                <MudButton Variant="Variant.Filled" OnClick="() => UpdateService(new DeployService())">新增服务</MudButton>
            </div>

        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12">
                <MudTable Items="@_deployServices"  Hover >
                    <HeaderContent>
                        <MudTh>编号</MudTh>
                        <MudTh>
                            <MudTableSortLabel Enabled SortBy="new Func<DeployService, object>(x => x.GroupName ?? string.Empty)">分组</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel Enabled SortBy="new Func<DeployService, object>(x => x.EnvironmentName ?? string.Empty)">环境</MudTableSortLabel>
                        </MudTh>
                        <MudTh>服务名</MudTh>
                        <MudTh >项目路径</MudTh>
                        <MudTh>
                            <MudTableSortLabel Enabled SortBy="new Func<DeployService, object>(x => x.Port ?? 0)">端口号</MudTableSortLabel>
                        </MudTh>
                        <MudTh>描述</MudTh>
                        <MudTh>健康检查</MudTh>
                        <MudTh>忽略规则</MudTh>
                        <MudTh>企业微信通知</MudTh>
                        <MudTh>仅拷贝文件</MudTh>
                        <MudTh>目标文件夹</MudTh>
                        <MudTh >操作</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="编号">@context.Id</MudTd>
                        <MudTd DataLabel="分组">@context.GroupName</MudTd>
                        <MudTd DataLabel="环境">@context.EnvironmentName</MudTd>
                        <MudTd DataLabel="服务名">@context.Name</MudTd>
                        <MudTd DataLabel="项目路径" Style="max-width: 100px;overflow-wrap: break-word">@context.ProjectPath</MudTd>
                        <MudTd DataLabel="端口号">@context.Port</MudTd>
                        <MudTd DataLabel="描述">@context.Description</MudTd>
                        <MudTd DataLabel="健康检查">@context.EnableHealthCheck</MudTd>
                        <MudTd DataLabel="忽略规则">@context.IgnoreRules</MudTd>
                        <MudTd DataLabel="企业微信通知">@context.EnableNotify</MudTd>
                        <MudTd DataLabel="仅拷贝文件">@context.OnlyCopyFiles</MudTd>
                        <MudTd DataLabel="目标文件夹">@context.TargetDir</MudTd>
                        <MudTd DataLabel="操作" >
                            <div style="display: flex;flex-direction: column;gap: 10px">
                                <MudButton Variant="Variant.Filled" OnClick="() => UpdateService(context)">修改</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => UpdateDeployTarget(context)">修改目标</MudButton>
                                <MudButton Variant="Variant.Filled" OnClick="() => DeleteService(context)">删除</MudButton>
                            </div>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            
        </MudItem>
    </MudGrid>
</div>
<style>
    .fixed-column {
        position: sticky;
    }
</style>
@code {
    string? _groupName;
    string? _serviceName;
    string? _environmentName;
    List<DeployService>? _deployServices;

    DeployService _addOrUpdateServiceModel = new();
    DeployService _deployServiceTargetUpdateModel = new();
    List<string?>? _serviceGroups;

    protected override void OnInitialized()
    {
        FetchData();
        _serviceGroups = (_deployServices?.Select(it => it.GroupName)
            .Distinct().ToList() ?? new List<string?>() { });
        base.OnInitialized();
    }

    private void Search()
    {
        FetchData();
    }

    void FetchData()
    {
        _deployServices = DbClient.Queryable<DeployService>()
            .WhereIF(!_groupName.IsNullOrEmpty(), it => it.GroupName == _groupName)
            .WhereIF(!_serviceName.IsNullOrEmpty(), it => it.Name == _serviceName)
            .WhereIF(!_environmentName.IsNullOrEmpty(), it => it.EnvironmentName == _environmentName)
            .ToList();
    }


    private void AddOrUpdateServiceCancel(MouseEventArgs obj)
    {
    }

    private void ResetAddOrUpdateModel()
    {
        _addOrUpdateServiceModel = new();
    }

    private void DeleteService(DeployService row)
    {
        Message.Add(row.Id.ToString(), Severity.Success);
    }

    async Task UpdateService(DeployService context)
    {
        _addOrUpdateServiceModel = context;
        var parameters = new DialogParameters<AddOrUpdateServiceDialog>()
        {
            { x => x.DeployService, _addOrUpdateServiceModel }
        };
        DialogOptions _maxWidth = new()
        {
            MaxWidth = MaxWidth.Medium, FullWidth = true,
            CloseButton = true
        };
        var result = DialogService.Show<AddOrUpdateServiceDialog>("新增或更新服务", parameters, _maxWidth);
        var dialogResult = await result.Result;
        Message.Add($"刷新{dialogResult}");
        FetchData();
    }

    void UpdateDeployTarget(DeployService deployService)
    {
        _deployServiceTargetUpdateModel = deployService;
        var parameters = new DialogParameters<AddOrUpdateDeployTargetDialog>()
        {
            { x => x.DeployService, _deployServiceTargetUpdateModel }
        };
        DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        var res = DialogService.Show<AddOrUpdateDeployTargetDialog>("编辑发布目标", parameters, _maxWidth);
    }


}